{"version":3,"sources":["MapComponentP.js","App.js","serviceWorker.js","index.js"],"names":["southWest","L","latLng","northEast","mybounds","latLngBounds","config","params","center","zoom","zoomSnap","minZoom","maxBounds","opacity","zoomControl","tileLayer","uri","attribution","maxZoom","HomeMap","props","myStyle","fillColor","weight","color","fillOpacity","onEachFeature_f","feature","layer","bindPopup","JSON","stringify","properties","Descripcion","agglosFilter","state","map","this","setState","placeHolder","featureGroup","addTo","addLayer","abovefive","geoJson","archivoGeoJSON","polygon","abovefive_polygon","onEachFeature","style","helloPopup","popup","setContent","easyButton","btn","setLatLng","getCenter","openOn","plantaDos","filter","Planta","plantaUno","plantaCero","logo","control","position","onAdd","wrapper","DomUtil","create","innerHTML","controlContent","document","getElementById","addEventListener","$","show","hide","e","console","log","target","className","nodeName","ready","on","checked","removeLayer","id","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","then","registration","unregister","catch","error","message"],"mappings":"uRASMA,EAAYC,IAAEC,OAAO,mBAAoB,iBACzCC,EAAYF,IAAEC,OAAO,mBAAoB,iBACzCE,EAAWH,IAAEI,aAAaL,EAAWG,GAEvCG,EAAS,GACbA,EAAOC,OAAS,CACfC,OAAQ,CAAC,mBAAoB,iBAC7BC,KAAM,GACNC,SAAU,GACVC,QAAS,EACTC,UAAWR,EACXS,QAAS,EACTC,aAAa,GAEdR,EAAOS,UAAY,CAElBC,IAAK,wDACLC,YACC,8EACDV,OAAQ,CACPW,QAAS,K,IAuLIC,E,kDAlLd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAKPC,QAAU,WACT,MAAO,CACNC,UAAW,aACXC,OAAQ,GACRC,MAAO,OACPC,YAAa,KAXI,EAgKnBC,gBAAkB,SAACC,EAASC,GAC3BA,EAAMC,UAAUC,KAAKC,UAAUJ,EAAQK,WAAWC,eAjKhC,EAoKnBC,aAAe,SAACP,GACf,MAAO,CACNL,UAAW,wBACXC,OAAQ,EACRC,MAAO,OACPC,YAAa,KAvKd,EAAKU,MAAQ,CACZC,IAAK,MAHY,E,gEAgBlB,IAAIA,EAAMnC,IAAEmC,IAAI,MAAO9B,EAAOC,QACxBQ,EAAYd,IAAEc,UACnBT,EAAOS,UAAUC,IACjBV,EAAOS,UAAUR,OACjBD,EAAOS,UAAUE,aAGlBoB,KAAKC,SAAS,CAAEF,MAAKrB,cACrBsB,KAAKE,YAActC,IAAEuC,eACrBH,KAAKE,YAAYE,MAAML,GACvBC,KAAKE,YAAYG,SAAS3B,GAE1BsB,KAAKM,UAAY,IAAI1C,IAAE2C,QAAQC,EAAgB,CAC9CC,QAAST,KAAKU,kBACdC,cAAeX,KAAKX,gBACpBuB,MAAOZ,KAAKH,eACVO,MAAML,GACH,IAAIc,EAAajD,IAAEkD,QAAQC,WAAW,sBAE3CnD,IAAEoD,WAAW,qDAAqD,SAASC,EAAKlB,GAC/Ec,EAAWK,UAAUnB,EAAIoB,aAAaC,OAAOrB,MAC3CK,MAAOL,GAGX,IAAIsB,EAAYzD,IAAE2C,QAAQC,EAAgB,CACzCc,OAED,SAAuBhC,GACtB,OAAkC,IAA9BA,EAAQK,WAAW4B,OACe,IAA9BjC,EAAQK,WAAW4B,OACf,QAIb,IAAIC,EAAY5D,IAAE2C,QAAQC,EAAgB,CAAEc,OAE5C,SAAuBhC,GACtB,OAAkC,IAA9BA,EAAQK,WAAW4B,OACe,IAA9BjC,EAAQK,WAAW4B,OACf,QAKb,IAAIE,EAAa7D,IAAE2C,QAClBC,EACA,CAAEc,OAGH,SAAuBhC,GACtB,GAAkC,IAA9BA,EAAQK,WAAW4B,OACtB,OAAO,IAJR,CAAEpC,MAAO,SAQV,IAAMuC,EAAO9D,IAAE+D,QAAQ,CAAEC,SAAU,gBACnCF,EAAKG,MAAQ,WACZ,IAAIC,EAAUlE,IAAEmE,QAAQC,OAAO,MAAO,QAkBtC,MAZC,uDAEA,kJAEA,kJAEA,kJACiB,eAElBF,EAAQG,UAFRC,slBAKOJ,GAERJ,EAAKtB,MAAML,GAEXoC,SAASC,eAAe,mBAAmBC,iBAC1C,SACA,WACCC,EAAE,iCAAiCC,KAAK,OAAQ,SAChDD,EAAE,oBAAoBE,KAAK,OAAQ,YAEpC,GAGDL,SACEC,eAAe,gCACfC,iBACA,SACA,SAAUI,GACTC,QAAQC,IAAI,YAAaF,EAAEG,OAAOC,WAClCH,QAAQC,IAAI,WAAYF,EAAEG,OAAOE,UAET,gBAAvBL,EAAEG,OAAOC,WACa,UAAtBJ,EAAEG,OAAOE,UACa,UAAtBL,EAAEG,OAAOE,UAKTR,EAAE,iCAAiCE,KAClC,OACA,SAEDF,EAAE,oBAAoBC,KAAK,OAAQ,UAPnCG,QAAQC,IAAI,WAUd,GAGFL,EAAEH,UAAUY,OAAM,WACjBT,EAAE,mBAAmBU,GAAG,UAAU,WAC7BhD,KAAKiD,UACRX,EAAEvC,EAAIM,SAASoB,IAAac,OAC5BD,EAAEvC,EAAImD,YAAY1B,IAAYgB,OAC9BF,EAAEvC,EAAImD,YAAY7B,IAAYmB,cAIjCF,EAAEH,UAAUY,OAAM,WACjBT,EAAE,mBAAmBU,GAAG,UAAU,WAC7BhD,KAAKiD,UACRX,EAAEvC,EAAIM,SAASgB,IAAYkB,OAC3BD,EAAEvC,EAAImD,YAAYzB,IAAae,OAC/BF,EAAEvC,EAAImD,YAAY1B,IAAYgB,cAKjCF,EAAEH,UAAUY,OAAM,WACjBT,EAAE,mBAAmBU,GAAG,UAAU,WAC7BhD,KAAKiD,UACRX,EAAEvC,EAAIM,SAASmB,IAAYe,OAC3BD,EAAEvC,EAAImD,YAAYzB,IAAae,OAC/BF,EAAEvC,EAAImD,YAAY7B,IAAYmB,gB,+BAqBjC,OAAO,yBAAKW,GAAG,Y,GA/KKC,aC5BP,SAASC,IACvB,OACC,6BAEC,kBAAC,EAAD,OCGiBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAED1B,SAASC,eAAe,SD0HnB,kBAAmB0B,WACrBA,UAAUC,cAAchB,MACrBiB,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,a","file":"static/js/main.8be4a87f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Component } from \"react\";\r\nimport L from \"leaflet\";\r\nimport \"leaflet-easybutton\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport archivoGeoJSON from \"./geojson.json\";\r\nimport * as $ from \"jquery\";\r\n\r\n\r\nconst southWest = L.latLng(40.46751056468401, -3.8018542796372);\r\nconst northEast = L.latLng(40.46751056468401, -3.8018542796372);\r\nconst mybounds = L.latLngBounds(southWest, northEast);\r\n\r\nlet config = {};\r\nconfig.params = {\r\n\tcenter: [40.46751056468401, -3.8018542796372],\r\n\tzoom: 19,\r\n\tzoomSnap: 0.1,\r\n\tminZoom: 3,\r\n\tmaxBounds: mybounds,\r\n\topacity: 0,\r\n\tzoomControl: false,\r\n};\r\nconfig.tileLayer = {\r\n\t//Original:\r\n\turi: \"https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png\",\r\n\tattribution:\r\n\t\t'&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\r\n\tparams: {\r\n\t\tmaxZoom: 20,\r\n\t},\r\n};\r\n\r\nclass HomeMap extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tmap: null,\r\n\t\t};\r\n\t}\r\n\tmyStyle = () => {\r\n\t\treturn {\r\n\t\t\tfillColor: \"##FFFFFFFF\",\r\n\t\t\tweight: 0.5,\r\n\t\t\tcolor: \"grey\",\r\n\t\t\tfillOpacity: 50,\r\n\t\t};\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n\t\tlet map = L.map(\"map\", config.params);\r\n\t\tconst tileLayer = L.tileLayer(\r\n\t\t\tconfig.tileLayer.uri,\r\n\t\t\tconfig.tileLayer.params,\r\n\t\t\tconfig.tileLayer.attribution\r\n\t\t);\r\n\r\n\t\tthis.setState({ map, tileLayer });\r\n\t\tthis.placeHolder = L.featureGroup();\r\n\t\tthis.placeHolder.addTo(map);\r\n\t\tthis.placeHolder.addLayer(tileLayer);\r\n\r\n\t\tthis.abovefive = new L.geoJson(archivoGeoJSON, {\r\n\t\t\tpolygon: this.abovefive_polygon,\r\n\t\t\tonEachFeature: this.onEachFeature_f,\r\n\t\t\tstyle: this.agglosFilter,\r\n\t\t}).addTo(map);\r\n        var helloPopup = L.popup().setContent('Click al edificio!');\r\n\r\n\t\t\tL.easyButton('<i class=\"far fa-hand-point-right\">Click aqui</i>', function(btn, map){\r\n\t\t\t\thelloPopup.setLatLng(map.getCenter()).openOn(map);\r\n\t\t\t}).addTo( map );\r\n\t\t//var plantasEdificio = L.layerGroup().addTo(map);\r\n\r\n\t\tvar plantaDos = L.geoJson(archivoGeoJSON, {\r\n\t\t\tfilter: Planta2filter,\r\n\t\t});\r\n\t\tfunction Planta2filter(feature) {\r\n\t\t\tif (feature.properties.Planta === 2)\r\n\t\t\t\treturn feature.properties.Planta === 2;\r\n\t\t\telse return null;\r\n\t\t}\r\n\t\t// plantasEdificio.addLayer(plantaDos);\r\n\r\n\t\tvar plantaUno = L.geoJson(archivoGeoJSON, { filter: Planta1filter });\r\n\r\n\t\tfunction Planta1filter(feature) {\r\n\t\t\tif (feature.properties.Planta === 1)\r\n\t\t\t\treturn feature.properties.Planta === 1;\r\n\t\t\telse return null;\r\n\t\t}\r\n\r\n\t\t//plantasEdificio.addLayer(plantaUno);\r\n\r\n\t\tvar plantaCero = L.geoJson(\r\n\t\t\tarchivoGeoJSON,\r\n\t\t\t{ filter: Planta0filter },\r\n\t\t\t{ color: \"grey\" }\r\n\t\t);\r\n\t\tfunction Planta0filter(feature) {\r\n\t\t\tif (feature.properties.Planta === 0) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst logo = L.control({ position: \"bottomright\" });\r\n\t\tlogo.onAdd = function () {\r\n\t\t\tlet wrapper = L.DomUtil.create(\"div\", \"logo\");\r\n\r\n\t\t\tlet controlContent =\r\n\t\t\t\t'<div id=\"c1\"><img id=\"imagen-edificio\" src=\"edificio.png\" width=\"30px\" alt=\"Edificio\"/><h1></h1></div>';\r\n\r\n\t\t\tcontrolContent +=\r\n\t\t\t\t'<div id=\"c2\"><div id=\"expandable-container-visible\">';\r\n\t\t\tcontrolContent +=\r\n\t\t\t\t'<div id=\"planta1\" class=\"radio-input\"><label><input id=\"primera-planta\" type=\"radio\" name=\"planta\" class=\"Planta\"/>Primera Planta</label></div>';\r\n\t\t\tcontrolContent +=\r\n\t\t\t\t'<div id=\"planta2\" class=\"radio-input\"><label><input id=\"segunda-planta\" type=\"radio\" name=\"planta\" class=\"Planta\"/>Segunda Planta</label></div>';\r\n\t\t\tcontrolContent +=\r\n\t\t\t\t'<div id=\"planta3\" class=\"radio-input\"><label><input id=\"tercera-planta\" type=\"radio\" name=\"planta\" class=\"Planta\"/>Tercera Planta</label></div>';\r\n\t\t\tcontrolContent += \"</div></div>\";\r\n\r\n\t\t\twrapper.innerHTML = controlContent;\r\n\r\n\t\t\t// L.DomEvent.on(wrapper, \"click\", function (ev) {});\r\n\t\t\treturn wrapper;\r\n\t\t};\r\n\t\tlogo.addTo(map);\r\n\r\n\t\tdocument.getElementById(\"imagen-edificio\").addEventListener(\r\n\t\t\t\"click\",\r\n\t\t\tfunction () {\r\n\t\t\t\t$(\"#expandable-container-visible\").show(\"fast\", \"swing\");\r\n\t\t\t\t$(\"#imagen-edificio\").hide(\"fast\", \"swing\");\r\n\t\t\t},\r\n\t\t\tfalse\r\n\t\t);\r\n\r\n\t\tdocument\r\n\t\t\t.getElementById(\"expandable-container-visible\")\r\n\t\t\t.addEventListener(\r\n\t\t\t\t\"click\",\r\n\t\t\t\tfunction (e) {\r\n\t\t\t\t\tconsole.log(\"className\", e.target.className);\r\n\t\t\t\t\tconsole.log(\"nodeName\", e.target.nodeName);\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\te.target.className === \"radio-input\" ||\r\n\t\t\t\t\t\te.target.nodeName === \"LABEL\" ||\r\n\t\t\t\t\t\te.target.nodeName === \"INPUT\"\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tconsole.log(\"HOLA\");\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$(\"#expandable-container-visible\").hide(\r\n\t\t\t\t\t\t\t\"fast\",\r\n\t\t\t\t\t\t\t\"swing\"\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t$(\"#imagen-edificio\").show(\"fast\", \"swing\");\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tfalse\r\n\t\t\t);\r\n\r\n\t\t$(document).ready(function () {\r\n\t\t\t$(\"#tercera-planta\").on(\"change\", function () {\r\n\t\t\t\tif (this.checked) {\r\n\t\t\t\t\t$(map.addLayer(plantaCero)).show();\r\n\t\t\t\t\t$(map.removeLayer(plantaUno)).hide();\r\n\t\t\t\t\t$(map.removeLayer(plantaDos)).hide();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t\t$(document).ready(function () {\r\n\t\t\t$(\"#segunda-planta\").on(\"change\", function () {\r\n\t\t\t\tif (this.checked) {\r\n\t\t\t\t\t$(map.addLayer(plantaDos)).show();\r\n\t\t\t\t\t$(map.removeLayer(plantaCero)).hide();\r\n\t\t\t\t\t$(map.removeLayer(plantaUno)).hide();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\t$(document).ready(function () {\r\n\t\t\t$(\"#primera-planta\").on(\"change\", function () {\r\n\t\t\t\tif (this.checked) {\r\n\t\t\t\t\t$(map.addLayer(plantaUno)).show();\r\n\t\t\t\t\t$(map.removeLayer(plantaCero)).hide();\r\n\t\t\t\t\t$(map.removeLayer(plantaDos)).hide();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t\t\r\n\t}\r\n\r\n\tonEachFeature_f = (feature, layer) => {\r\n\t\tlayer.bindPopup(JSON.stringify(feature.properties.Descripcion));\r\n\t};\r\n\r\n\tagglosFilter = (feature) => {\r\n\t\treturn {\r\n\t\t\tfillColor: \"rgba(255,255,255,0.1)\",\r\n\t\t\tweight: 1,\r\n\t\t\tcolor: \"grey\",\r\n\t\t\tfillOpacity: 50,\r\n\t\t};\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn <div id=\"map\" />;\r\n\t}\r\n}\r\n\r\nexport default HomeMap;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport  HomeMap from \"./MapComponentP\";\n\n//import {MapComponent }from \"./MapComponent\";\nexport default function App() {\n\treturn (\n\t\t<div>\n\t\t\t\n\t\t\t<HomeMap /> \n\t\t\n\n\t\t</div>\n\t);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}